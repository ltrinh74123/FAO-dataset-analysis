# If loop that checks whether the original names 'Area_OG' matches with any of maps name
for (i in seq_along(new_country_names)) {
exact_match = intersect(temp_countryonly$Area_og[i], world_oglist)
if (length(exact_match) > 0) {
new_country_names[i] = exact_match
}
else {
for (j in 1:length(world_list)) {
# Checks for any pattern in the world list that can be found in the temp_area
similiar_match = grep(world_list[j], temp_countryonly$Area[i], value = TRUE)
}
if (length(similiar_match) >0){
new_country_names[i] = similiar_match
}
}
new_country_names %>% unique()
# Initialising a new vector to change the names for every record so an empty vector that has 140003 black spaces.
new_country_names = character(length(temp_countryonly$`Area`))
# If loop that checks whether the original names 'Area_OG' matches with any of maps name
for (i in seq_along(new_country_names)) {
exact_match = intersect(temp_countryonly$Area_og[i], world_oglist)
if (length(exact_match) > 0) {
new_country_names[i] = exact_match
}
else {
for (j in 1:length(world_list)) {
# Checks for any pattern in the world list that can be found in the temp_area
similiar_match = grep(world_list[j], temp_countryonly$Area[i], value = TRUE)
}
if (length(similiar_match) >0){
new_country_names[i] = similiar_match
}
}
}
new_country_names %>% unique()
# Initialising a new vector to change the names for every record so an empty vector that has 140003 black spaces.
new_country_names = character(length(temp_countryonly$`Area`))
# If loop that checks whether the original names 'Area_OG' matches with any of maps name
for (i in seq_along(new_country_names)) {
exact_match = intersect(temp_countryonly$Area_og[i], world_oglist)
if (length(exact_match) > 0) {
new_country_names[i] = exact_match
}
else {
for (j in 1:length(world_list)) {
# Checks for any pattern in the world list that can be found in the temp_area
similiar_match = grep(world_list[j], temp_countryonly$Area[i], value = TRUE)
}
if (length(similiar_match) >0){
new_country_names[i] = similiar_match
}
}
}
length(new_country_names %>% unique())
length(new_country_names %>% unique())
# Initialising a new vector to change the names for every record so an empty vector that has 140003 black spaces.
new_country_names = character(length(temp_countryonly$`Area`))
# If loop that checks whether the original names 'Area_OG' matches with any of maps name
for (i in seq_along(new_country_names)) {
exact_match = intersect(temp_countryonly$Area_og[i], world_oglist)
if (length(exact_match) > 0) {
new_country_names[i] = exact_match
}
# else {
#   for (j in 1:length(world_list)) {
#     # Checks for any pattern in the world list that can be found in the temp_area
#     similiar_match = grep(world_list[j], temp_countryonly$Area[i], value = TRUE)
#   }
#   if (length(similiar_match) >0){
#     new_country_names[i] = similiar_match
#
# }
# }
}
length(new_country_names %>% unique())
# Initialising a new vector to change the names for every record so an empty vector that has 140003 black spaces.
new_country_names = character(length(temp_countryonly$`Area`))
# If loop that checks whether the original names 'Area_OG' matches with any of maps name
for (i in seq_along(new_country_names)) {
exact_match = intersect(temp_countryonly$Area_og[i], world_oglist)
if (length(exact_match) > 0) {
new_country_names[i] = exact_match
}
else {
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
new_country_names[matching_elements] <- world_list[i]
}
}
length(new_country_names %>% unique())
length(temp_countryonly$Area %>% unique())
length(new_country_names %>% unique())
for (i in seq_along(new_country_names)) {
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
new_country_names[matching_elements] <- world_list[i]
}
new_country_names = character(length(temp_countryonly$`Area`))
for (i in seq_along(new_country_names)) {
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
new_country_names[matching_elements] <- world_list[i]
}
new_country_names
new_country_names %>% unique()
length(new_country_names %>% unique())
length(new_country_names %>% unique())
length(new_country_names %>% unique())
# Initialising a new vector to change the names for every record so an empty vector that has 140003 black spaces.
new_country_names = character(length(temp_countryonly$`Area`))
# If loop that checks whether the original names 'Area_OG' matches with any of maps name
for (i in seq_along(new_country_names)) {
exact_match = intersect(temp_countryonly$Area_og[i], world_oglist)
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
if (length(exact_match) > 0) {
new_country_names[i] = exact_match
}
else {
new_country_names[matching_elements] <- world_list[i]
}
}
length(temp_countryonly$Area %>% unique())
length(new_country_names %>% unique())
length(new_country_names %>% unique())
# Initialising a new vector to change the names for every record so an empty vector that has 140003 black spaces.
new_country_names = character(length(temp_countryonly$`Area`))
# If loop that checks whether the original names 'Area_OG' matches with any of maps name
for (i in seq_along(new_country_names)) {
exact_match = intersect(temp_countryonly$Area_og[i], world_oglist)
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
print(matching_elements)
if (length(exact_match) > 0) {
new_country_names[i] = exact_match
}
else {
new_country_names[matching_elements] <- world_list[i]
}
}
## Debugging with 10 observation
temp_debug = head(temp_countryonly, 10)
new_country_names = character(length(temp_debug$`Area`))
# If loop that checks whether the original names 'Area_OG' matches with any of maps name
for (i in seq_along(new_country_names)) {
print(i)
print(grepl(world_list[i], temp_countryonly$Area))
}
## Debugging with 10 observation
temp_debug = head(temp_countryonly, 10)
new_country_names = character(length(temp_debug$`Area`))
# If loop that checks whether the original names 'Area_OG' matches with any of maps name
for (i in seq_along(new_country_names)) {
print(i)
print(length(grepl(world_list[i], temp_countryonly$Area)))
}
## Debugging with 10 observation
temp_debug = head(temp_countryonly, 10)
new_country_names = character(length(temp_debug$`Area`))
# If loop that checks whether the original names 'Area_OG' matches with any of maps name
for (i in seq_along(new_country_names)) {
print(i)
print(length(grepl(world_list[i], temp_countryonly$Area)) == TRUE)
}
## Debugging with 10 observation
# temp_debug = head(temp_countryonly, 10)
#
# new_country_names = character(length(temp_debug$`Area`))
# If loop that checks whether the original names 'Area_OG' matches with any of maps name
for (i in seq_along(new_country_names)) {
print(i)
print(length(grepl(world_list[i], temp_countryonly$Area)) == TRUE)
}
# Initialising a new vector to change the names for every record so an empty vector that has 140003 black spaces.
new_country_names = character(length(temp_countryonly$`Area`))
# If loop that checks whether the original names 'Area_OG' matches with any of maps name
for (i in seq_along(new_country_names)) {
exact_match = intersect(temp_countryonly$Area_og[i], world_oglist)
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
print(matching_elements)
if (length(exact_match) > 0) {
new_country_names[i] = exact_match
}
else {
new_country_names[matching_elements] <- world_list[i]
}
}
# Initialising a new vector to change the names for every record so an empty vector that has 140003 black spaces.
new_country_names = character(length(temp_countryonly$`Area`))
# If loop that checks whether the original names 'Area_OG' matches with any of maps name
for (i in seq_along(new_country_names)) {
exact_match = intersect(temp_countryonly$Area_og[i], world_oglist)
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
if (length(exact_match) > 0) {
new_country_names[i] = exact_match
}
else {
new_country_names[matching_elements] <- world_list[i]
}
}
length(temp_countryonly$Area %>% unique())
length(new_country_names %>% unique())
new_country_names = character(length(temp_countryonly$`Area`))
for (i in seq_along(new_country_names)) {
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
new_country_names[matching_elements] <- world_list[i]
}
length(new_country_names %>% unique())
new_country_names = character(length(temp_countryonly$`Area`))
for (i in seq_along(new_country_names)) {
print(i)
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
new_country_names[matching_elements] <- world_list[i]
}
new_country_names = character(length(temp_countryonly$`Area`))
for (i in seq_along(new_country_names)) {
print(world_list[i])
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
new_country_names[matching_elements] <- world_list[i]
}
# Initialising a new vector to change the names for every record so an empty vector that has 140003 black spaces.
new_country_names = character(length(temp_countryonly$`Area`))
# If loop that checks whether the original names 'Area_OG' matches with any of maps name
for (i in seq_along(new_country_names)) {
exact_match = intersect(temp_countryonly$Area_og[i], world_oglist)
matching_elements <- grepl(world_list, temp_countryonly$Area[i])
if (length(exact_match) > 0) {
new_country_names[i] = exact_match
}
else {
new_country_names[matching_elements] <- world_list[i]
}
}
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
# Initialising a new vector to change the names for every record so an empty vector that has 140003 black spaces.
new_country_names = character(length(temp_countryonly$`Area`))
# If loop that checks whether the original names 'Area_OG' matches with any of maps name
for (i in seq_along(new_country_names)) {
exact_match = intersect(temp_countryonly$Area_og[i], world_oglist)
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
if (length(exact_match) > 0) {
new_country_names[i] = exact_match
}
else {
new_country_names[matching_elements] <- world_list[i]
}
}
length(temp_countryonly$Area %>% unique())
length(new_country_names %>% unique())
new_country_names = character(length(temp_countryonly$`Area`))
for (i in seq_along(new_country_names)) {
print(world_list[i])
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
new_country_names[matching_elements] <- world_list[i]
}
new_country_names = character(length(temp_countryonly$`Area`))
for (i in seq_along(new_country_names)) {
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
new_country_names[matching_elements] <- world_list[i]
}
length(new_country_names %>% unique())
library(tidyverse)
library(readr)
file_path <- file.path("data/FAOSTAT_A-S_E/Environment_Temperature_change_E_All_Data_(Normalized)", "Environment_Temperature_change_E_All_Data_(Normalized).csv")
temp <- read_csv(file_path, locale = locale(encoding = "UTF-8"))
temp$Unit ="Celsius"
temp = temp %>% filter(temp$Element == "Temperature change")
temp = temp %>% filter(`Months Code` == 7020)
temp <- temp %>% mutate(index = 1:nrow(.))
temp_countryonly = temp %>% filter(`Area Code` < 5000)
# Making a function that removes symbols/letters that are not utf8 compatible such as country names
remove_non_utf8 <- function(vec) {
vec_cleaned <- iconv(vec, to = "ASCII//IGNORE")
return(vec_cleaned)
}
world_map = map_data("world")
# Made 2 vectors for the world map names, 1) to check for the exact matching including spaces and another to match similiar letters based on stripped text
world_list = world_map$region %>% unique()
# list 1)
world_oglist = world_list
# list 2)
world_list <- gsub(" ", "", world_list)
world_list = tolower(world_list)
temp_countryonly$Area_og = temp_countryonly$Area %>% remove_non_utf8()
temp_countryonly$Area = temp_countryonly$Area %>% remove_non_utf8()
country_names = temp_countryonly$Area_og %>% unique()
temp_countryonly$Area = gsub(" ", "", temp_countryonly$Area)
temp_countryonly$Area = tolower(temp_countryonly$Area)
temp_countryonly$Area = recode(temp_countryonly$Area,
'unitedstatesofamerica' = "usa",
'unitedkingdomofgreatbritainandnorthernireland' = 'uk',
'republicofkorea' = 'southkorea',
"democraticpeople'srepublicofkorea" = "northkorea",
"laopeople'sdemocraticrepublic" = 'laos',
'runion' = 'reunion',
'congo' = 'republicofcongo',
'czechia' = 'czechrepublic',
'cocos(keeling)islands' = 'cocosislands')
#temp_countryonly$Area %>% unique()
new_country_names <- character(length(temp_countryonly$Area))
# Loop to find matches and update vector2
for (i in seq_along(new_country_names)) {
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
new_country_names[matching_elements] = world_oglist[i]
}
# Loop to find exact matches
for (i in seq_along(new_country_names)) {
exact_match = intersect(temp_countryonly$Area_og[i], world_oglist)
if (length(exact_match) > 0) {
new_country_names[i] = exact_match
}
}
temp_countryonly$region
world_map = map_data("world")
temp = temp_countryonly %>% select("region", "Year", "Value")
temp_countryonly$region
world_map = map_data("world")
temp = temp_countryonly %>% subset("region", "Year", "Value")
temp = temp_countryonly %>% filter("region", "Year", "Value")
temp = temp_countryonly %>% filter(region, Year, Value)
temp_countryonly
new_country_names <- character(length(temp_countryonly$Area))
# Loop to find matches and update vector2
for (i in seq_along(new_country_names)) {
matching_elements <- grepl(world_list[i], temp_countryonly$Area)
new_country_names[matching_elements] = world_oglist[i]
}
# Loop to find exact matches
for (i in seq_along(new_country_names)) {
exact_match = intersect(temp_countryonly$Area_og[i], world_oglist)
if (length(exact_match) > 0) {
new_country_names[i] = exact_match
}
}
temp_countryonly$region = exact_match
View(temp_countryonly)
temp_countryonly$region = new_country_names
View(temp_countryonly)
temp = temp_countryonly %>% select("region", "Year", "Value")
temp
temp_2009 = temp %>% filter(Year == 2009)
temp_2009
ggplot() + geom_polygon(data = temp_2009, aes(x = long, y = lat, group = group), alpha = 0.3) +
scale_colour_viridis() +
labs(title = "Coral bleaching events from 1998 to 2017",
x = "Longitude", y = "Latitude",
colour = "Bleaching") +
theme_minimal()
ggplot() + geom_polygon(data = temp_2009, aes(x = long, y = lat, group = group), alpha = 0.3) +
labs(title = "Coral bleaching events from 1998 to 2017",
x = "Longitude", y = "Latitude",
colour = "Bleaching") +
theme_minimal()
map_2009 = merge(world_map, temp_2009, by = "region")
ggplot() + geom_polygon(data = temp_2009, aes(x = long, y = lat, group = group), alpha = 0.3) +
labs(title = "Coral bleaching events from 1998 to 2017",
x = "Longitude", y = "Latitude",
colour = "Bleaching") +
theme_minimal()
map_2009
ggplot() + geom_polygon(data = temp_2009, aes(x = temp_2009$long, y = lat, group = group), alpha = 0.3) +
labs(title = "Coral bleaching events from 1998 to 2017",
x = "Longitude", y = "Latitude",
colour = "Bleaching") +
theme_minimal()
ggplot() + geom_polygon(data = temp_2009, aes(x = temp_2009$long, y = temp_2009$lat, group = temp_2009$group), alpha = 0.3) +
labs(title = "Coral bleaching events from 1998 to 2017",
x = "Longitude", y = "Latitude",
colour = "Bleaching") +
theme_minimal()
ggplot() + geom_polygon(data = temp_2009, aes(x = temp_2009$long, y = temp_2009$lat, group = temp_2009$group)) +
labs(title = "Coral bleaching events from 1998 to 2017",
x = "Longitude", y = "Latitude",
colour = "Bleaching") +
theme_minimal()
ggplot() + geom_polygon(data = temp_2009, aes(x = temp_2009$long, y = temp_2009$lat, group = temp_2009$group)) +
theme_minimal()
ggplot() + geom_polygon(data = temp_2009, aes(x = long, y = lat, group = group)) +
theme_minimal()
ggplot() + geom_map(data = temp_2009, aes(x = long, y = lat, group = group)) +
theme_minimal()
ggplot() + geom_polygon(data = temp_2009, aes(x = long, y = lat, group = group))
shiny::runApp('Documents/Github/Visualising_with_shiny')
ggplot() + geom_polygon(data = temp_2009, aes(x = long, y = lat, group = group))
ggplot() + geom_polygon(data = temp_2009, aes(x = long, y = lat, group = group))
temp_2009
temp_countryonly$region
world_map = map_data("world")
temp = temp_countryonly %>% select("region", "Year", "Value")
temp_2009 = temp %>% filter(Year == 2009)
map = merge(world_map, temp, by = "region")
world_map = map_data("world")
temp = temp_countryonly %>% select("region", "Year", "Value")
temp_2009 = temp %>% filter(Year == 2009)
map = merge(world_map, temp, by = "region")
map_2009 = merge(world_map, temp_2009, by = "region")
ggplot() + geom_polygon(data = map_2009, aes(x = long, y = lat, group = group))
map_2009
ggplot() + geom_polygon(data = map_2009, aes(x = long, y = lat, group = group))
ggplot() + geom_polygon(data = world_map, aes(x = long, y = lat, group = group))
leftjoinmap = left_join(world_map, temp, by = "region")
leftjoinmap = left_join(world_map, temp_2009, by = "region")
temp_2009
world_map
leftjoinmap = inner_join(world_map, temp_2009, by = "region")
leftjoinmap = inner_join(world_map, temp_2009, by = "region")
leftjoinmap = inner_join(temp_2009, world_mapby = "region")
leftjoinmap = inner_join(temp_2009, world_mapmby = "region")
leftjoinmap = inner_join(temp_2009, world_map,by = "region")
leftjoinmap = left_join(temp_2009, world_map, by = "region")
temp
leftjoinmap = left_join(temp_2009, world_map, by = "region")
map = merge(world_map, temp, by = "region")
ggplot() + geom_polygon(data = map_2009, aes(x = long, y = lat, group = group, fill = Value))
map_2009
ggplot() + geom_polygon(data = map_2009, aes(x = long, y = lat, group = order, fill = Value))
ggplot() + geom_polygon(data = map_2009, aes(x = long, y = lat, group = group, fill = Value))
ggplot() + geom_polygon(data = map_2009, aes(x = long, y = lat, group = group, fill = Value)) + geom_polygon(world_map, aes(x = long, y = lat, group = group, fill = "grey")
ggplot() + geom_polygon(data = map_2009, aes(x = long, y = lat, group = group, fill = Value)) + geom_polygon(world_map, aes(x = long, y = lat, group = group, fill = "grey"))
ggplot() + geom_polygon(data = map_2009, aes(x = long, y = lat, group = group, fill = Value)) + geom_polygon(world_map, aes(x = long, y = lat, group = group), fill = "grey")
ggplot() + geom_polygon(data = map_2009, aes(x = long, y = lat, group = group, fill = Value)) + geom_polygon(data=world_map, aes(x = long, y = lat, group = group), fill = "grey")
ggplot() + geom_polygon(data=world_map, aes(x = long, y = lat, group = group), fill = "grey") +
geom_polygon(data = map_2009, aes(x = long, y = lat, group = group, fill = Value)) +
ggplot() + geom_polygon(data=world_map, aes(x = long, y = lat, group = group), fill = "grey") + geom_polygon(data = map_2009, aes(x = long, y = lat, group = group, fill = Value)) +
ggplot() + geom_polygon(data=world_map, aes(x = long, y = lat, group = group), fill = "grey") + geom_polygon(data = map_2009, aes(x = long, y = lat, group = group, fill = Value))
map_2009
install.packages("choroplethr")
country_choropleth(temp_2009, zoom=temp_2009$region)
library(choroplethr)
country_choropleth(temp_2009, zoom=temp_2009$region)
install.packages("choroplethr")
install.packages("choroplethrMaps")
library(choroplethr)
library(choroplethrMaps)
# Load the map data
data(world.regions)
# Create a choropleth map
choro <- df_pop_admin1  # Replace with your own dataset
# Create a choropleth map
choro <- df_pop_admin1  # Replace with your own dataset
library(choroplethr)
library(choroplethrMaps)
# Load the map data
data(world.regions)
# Create a choropleth map
choro <- temp_2009  # Replace with your own dataset
ch_map = Map(df = choro,
title = "Choropleth Map Example",
legend = "Population",
num_colors = 9,
zoom = "world")
# Load the map data
data(world.regions)
library(choroplethr)
library(choroplethrMaps)
# Load the map data
data(world.regions)
# Create a choropleth map
choro <- temp_2009  # Replace with your own dataset
ch_map = Map(df = choro,
title = "Choropleth Map Example",
legend = "Population",
num_colors = 9,
zoom = "world")
library(choroplethr)
library(choroplethrMaps)
# Load the map data
data(world.regions)
# Create a choropleth map
choro <- map_2009  # Replace with your own dataset
ch_map = Map(df = choro,
title = "Choropleth Map Example",
legend = "Population",
num_colors = 9,
zoom = "world")
Map(temp_2009, zoom=temp_2009$region)
library(choroplethr)
Map(temp_2009, zoom=temp_2009$region)
ch_map = Map(temp_2009, zoom=temp_2009$region)
ch_map = Map(map_2009, zoom=temp_2009$region)
library(choroplethr)
library(choroplethrMaps)
# Load the map data
data(world.regions)
# Create a choropleth map
choro <- temp_2009  # Replace with your own dataset
ch_map = Map(df = choro,
title = "Choropleth Map Example",
legend = "Population",
num_colors = 9,
zoom = "world")
library(choroplethr)
library(choroplethrMaps)
# Load the map data
data(world.regions)
# Create a choropleth map
choro <- temp_2009  # Replace with your own dataset
ch_map = Map(df = choro,
legend = "Population",
zoom = "world")
library(choroplethr)
library(choroplethrMaps)
# Load the map data
data(world.regions)
# Create a choropleth map
choro <- temp_2009  # Replace with your own dataset
ch_map = Map(df = choro,
legend = "Population",
zoom = "world")
# data(country.map)
# ggplot(country.map, aes(long, lat, group=group)) + geom_polygon()
data(country.map)
ggplot(country.map, aes(long, lat, group=group)) + geom_polygon()
library(ggplot2)
data(country.map)
ggplot(country.map, aes(long, lat, group=group)) + geom_polygon()
View(temp_2009)
